////////////////////////////////////////////////////////////////////////////////
//								FileAttente.h									               //
//				  Fait par Mélissa Boucher et Xavier Brosseau				         //
//							Créé le 29 octobre 2014							               //
//						Derniere modif 16 novembre 2014						            //
//																		                        //
//			Déclaration de la classe FileAttente qui stock le 1er et dernier		//
//			clients en attente. Les méthodes utilisés sont fait pour modififer	//
//			la file et afficher la file.														//
////////////////////////////////////////////////////////////////////////////////
#ifndef _FILEATTENTE_H_
#define _FILEATTENTE_H_
#include "ClientsEnAttente.h"

class FileAttente
{
	ClientsEnAttente * pPremier_;  // Premier de la file
	ClientsEnAttente * pDernier_;  // Dernier de la file
	int nbGroupes_ = 0;// Nombre de noeuds dans la file
	int nbPersonne_ = 0;//Nombre de client dans la file
	int nbPersonnesTotal_ = 0;//Nombre de client dans la file au total
	int nbGroupesTotal_ = 0;//Nombre de Groupe dans la file au total

	////////////////////////////////////////////////////////////////////////////////

	//												SetPremier()							             
	//							Intrant : prend un pointeur du noeud et l'identifie
	//									comme le nouveau premier de la list avec le
	//									pointeur premier.
	//	

	//												SetPremier()										//           
	//						Intrant : prend un pointeur du noeud et l'identifie			//
	//									 comme le nouveau premier de la list. 					//

	////////////////////////////////////////////////////////////////////////////////
	void SetPremier(ClientsEnAttente * p);
	////////////////////////////////////////////////////////////////////////////////
	//												GetPremier()							             
	//										Extrant : Retourne le pointeur du
	//										premier noeud dans la list
	//	
	////////////////////////////////////////////////////////////////////////////////
	ClientsEnAttente*  GetPremier() const;
	////////////////////////////////////////////////////////////////////////////////
	//												SetDernier()							             
	//							Intrant : prend un pointeur du noeud et l'identifie
	//									comme le nouveau dernier de la list avec le
	//									pointeur dernier.	 
	//	
	////////////////////////////////////////////////////////////////////////////////
	void SetDernier(ClientsEnAttente * p);
	////////////////////////////////////////////////////////////////////////////////
	//												GetDernier()							             
	//										Extrant : Retourne le pointeur du
	//										dernier noeud dans la list	 
	//	
	////////////////////////////////////////////////////////////////////////////////
	ClientsEnAttente*  GetDernier() const;
	////////////////////////////////////////////////////////////////////////////////
	//												SetNbGroupes()							             
	//										Intrant :Prend un int et le met
	//											comme valeur  du NbGroupes
	////////////////////////////////////////////////////////////////////////////////
	void SetNbGroupes(int nb);
	////////////////////////////////////////////////////////////////////////////////
	//												SetNbPersonnes()							             
	//										Intrant :Prend un int et le met
	//											comme valeur  du NbPersonnes 
	//	
	////////////////////////////////////////////////////////////////////////////////
	void SetNbPersonnes(int nb);
	////////////////////////////////////////////////////////////////////////////////
	//												SetNbGroupesTotal()							             
	//										Intrant :Prend un int et le met
	//											comme valeur  du NbGroupesTotal 	 
	//	
	////////////////////////////////////////////////////////////////////////////////
	void SetNbGroupesTotal(int nb);
	////////////////////////////////////////////////////////////////////////////////
	//												SetNbPersonnesTotal()							             
	//										Intrant :Prend un int et le met
	//											comme valeur  du NbPersonnesTotal 	 
	//	
	////////////////////////////////////////////////////////////////////////////////
	void SetNbPersonnesTotal(int nb);


public:
	////////////////////////////////////////////////////////////////////////////////
	//												FileAttente()							             
	//											Constructeur par défaut
	//
	////////////////////////////////////////////////////////////////////////////////
	FileAttente();
	////////////////////////////////////////////////////////////////////////////////
	//												Afficher()							             
	//										Intrant : Ostream
	//											effectue l'affichage des clients
	//											de la list.
	// 
	////////////////////////////////////////////////////////////////////////////////
	void   Afficher(ostream & out) const;
	////////////////////////////////////////////////////////////////////////////////
	//												ObtenirNbGroupes()							             
	//										Extrant : retourne le nombre de
	//											groupes que contient laFile
	//
	////////////////////////////////////////////////////////////////////////////////

	int    ObtenirNbGroupes() const;
	////////////////////////////////////////////////////////////////////////////////
	//												ObtenirNbPersonnes()							             
	//										Extrant : retourne le nombre de 
	//											clients que contient laFile

	////////////////////////////////////////////////////////////////////////////////
	int    ObtenirNbPersonnes() const;
	////////////////////////////////////////////////////////////////////////////////
	//												ObtenirNbPersonnesTotal()							             
	//										Intrant : 	Extrant : retourne le
	//											nombre de client total 
	//											qui a été servi.
	//
	////////////////////////////////////////////////////////////////////////////////
	int    ObtenirNbPersonnesTotal() const;
	////////////////////////////////////////////////////////////////////////////////
	//												ObtenirNbGroupesTotal()							             
	//										Intrant : 	Extrant : 	 
	//	retourne le nombre de groupe qui a été servi
	////////////////////////////////////////////////////////////////////////////////
	int    ObtenirNbGroupesTotal() const;
	////////////////////////////////////////////////////////////////////////////////
	//												MettreEnMajuscules()							             
	//										Intrant : 	Extrant : 	 
	//	mettre le string passé en caractère en majuscule, pour verifier si les noms sont pareils
	////////////////////////////////////////////////////////////////////////////////
	string  MettreEnMajuscules(string nom) const;
	////////////////////////////////////////////////////////////////////////////////
	//												EstLeMemeNom()							             
	//										Intrant : 	Extrant : 	 
	//	vérifie si le client passé en parametre et le client de l'instance sont pareil
	////////////////////////////////////////////////////////////////////////////////
	bool EstLeMemeNom(ClientsEnAttente * p, string nom, int nbPersonnes) const;
	////////////////////////////////////////////////////////////////////////////////
	//												Ajouter()							             
	//										Intrant : 	Extrant : 	 
	//	ajoute un nouveau client dans la file d'attente
	////////////////////////////////////////////////////////////////////////////////
	void	Ajouter(ClientsEnAttente::Client clientAMettreEnFile);
	////////////////////////////////////////////////////////////////////////////////
	//												Retirer()							             
	//										Intrant : 	Extrant : 	 
	//	 assigner un groupe a une table
	////////////////////////////////////////////////////////////////////////////////
	ClientsEnAttente::Client Retirer(int nbPlacesDeLaTable, Section sectionDeLaTable);
	////////////////////////////////////////////////////////////////////////////////
	//												Retirer()							             
	//										Intrant : 	Extrant : 	 
	//	retirer un groupe de la file
	////////////////////////////////////////////////////////////////////////////////
	bool	Retirer(string nomClient, int nbPersonnes);
	////////////////////////////////////////////////////////////////////////////////
	//												GetClient()							             
	//										Intrant : 	Extrant : 	 
	//	retourne un client
	////////////////////////////////////////////////////////////////////////////////
	string	GetClient(int indice) const;
	////////////////////////////////////////////////////////////////////////////////
	//												EstVide()							             
	//										Intrant : 	Extrant : 	 
	//	verifie si la file est vide
	////////////////////////////////////////////////////////////////////////////////
	bool	EstVide() const;
	////////////////////////////////////////////////////////////////////////////////
	//												VérifierSiPrésent()							             
	//										Intrant : 	Extrant : 	 
	//	Méthode qui vérifie si un nom est dans la liste
	////////////////////////////////////////////////////////////////////////////////
	bool   VérifierSiPrésent(string nom, int nbPersonnes) const;
	////////////////////////////////////////////////////////////////////////////////
	//												AfficherSection()							             
	//										Intrant : 	Extrant : 	 
	//	Pour afficher le choix de section
	////////////////////////////////////////////////////////////////////////////////
	string AfficherSection(int i) const;
	////////////////////////////////////////////////////////////////////////////////
	//												ReduireBoucle()							             
	//										Intrant : 	Extrant : 	 
	//	
	////////////////////////////////////////////////////////////////////////////////
	void ReduireBoucle(ClientsEnAttente * & pTemporaire, bool & trouver, ClientsEnAttente * & meilleursChoix, int & i, Section & sectionDeLaTable);
};
#endif
